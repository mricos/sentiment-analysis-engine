<html>
  <head>
  </head>
  <body>
    <div id="root"></div>
    <script 
      crossorigin 
      src="https://unpkg.com/react@16/umd/react.development.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/babel-standalone@6.26.0/babel.js"
    ></script>
    <script 
      src="https://cdnjs.cloudflare.com/ajax/libs/react-markdown/4.3.1/react-markdown.js" 
      integrity="sha512-uVjoOKL4IHlUC7gc0LuPfhTqvJBi37Uff7EC3s4tXAZp0rgskDv40jgOIvv3ImoPFZyCwUtsQ4VQ1SRXKHyrXQ==" 
      crossorigin="anonymous" 
      referrerpolicy="no-referrer"
    ></script>
    <script 
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.4/axios.min.js" 
      integrity="sha512-lTLt+W7MrmDfKam+r3D2LURu0F47a3QaW5nF0c6Hl0JDZ57ruei+ovbg7BrZ+0bjVJ5YgzsAWE+RreERbpPE1g==" 
      crossorigin="anonymous" 
      referrerpolicy="no-referrer"
    ></script>
    <script type="text/babel">

        function ReadMe() {
            return (
	        <ReactMarkdown>
		    # Sentiment Analysis Engine GUI  

                    Provides positive, negative, or neutral classification for a sample of  English language text.  

                     Current version is based off of [Natural](https://github.com/NaturalNode/natural), the node-based NLP library.  


                      ## GUI  


                      To request sentiment analysis from the GUI,  

                      choose whether you want your text analyzed as a single text string  

                      or analyzed per word.  

                      Once selected, fill in the input bar with your text.  

                      Click the button "Analyze" to send your text to be analyzed.  

                      The resulting analysis will be displayed below the input.  

                      Use the clear button when you'd like to clear your text from the input.    
		</ReactMarkdown>
	    );
	}

	const API = 
	    "${API_ROOT}" 
	    || "http://localhost:3000/api/nlp";

        // define command line interface
        function SaeCmdLine() {

            const [text, setText] = React.useState("");
            // single - the input is interpreted as a single string
            // each - the input is interpreted as each word 
            // and sent in an array
            const [option, setOption] = React.useState("single");
	    const [analysis, setAnalysis] = React.useState("");

            function handleOption(e) {
                setOption(e.target.value);
            }

            // submit entire text string for single analysis
            async function handleSubmit(e) {

                e.preventDefault();

                // Response: { data: Sentiment | Sentiment[] } 
                // pulls sentiment from the data object

                if (option === "single") {
	            const { data: { sentiment } } = await axios.post(
	                // POST Request
	                API,
	                { data: text }
	            );
		    setAnalysis(sentiment);
	            return;
                }
    
                if (option === "each") {
	            const { data: { sentiment } } = await axios.post(
                        // POST Request
			API,
			{ data: text.split(" ") }
		    );
		    setAnalysis(sentiment);
		    return;

                }

            }

            function handleChange(e) {
                setText(e.target.value);
            }

            const centered = {
                "position": "fixed",
                "top": "50%",
                "left": "50%",
                "transform": "translate(-50%, -50%)",
            };

	    const displayBlock = { "display": "block" };

            return (
		<div style={centered}>
		    <ReadMe />
		    <button onClick={() => setText("")}>Clear</button>
                    <form
	                onSubmit={handleSubmit}
                    >
		        <label style={displayBlock}>
	                    Analyzed as single text string
	                    <input 
		                type="radio" 
		                value="single"
		                checked={option === "single"}
		                onChange={handleOption}
	                    />
	                </label>
		        <label style={displayBlock}>
	                    Analyzed per word
	                    <input 
		                type="radio"
		                value="each"
		                checked={option === "each"}
		                onChange={handleOption}
	                    />
	                </label>
	                <input 
	                    type="text"
	                    value={text}
	                    onChange={handleChange}
	                />
	                <input type="submit" value="Analyze" />
                    </form>
		    <div>
		        {
			    typeof(analysis) === "string" 
			        ? analysis 
				: analysis.join(", ")
			}
		    </div>
		</div>
            );
        }

        const mountPoint = document.getElementById("root");
        ReactDOM.render(<SaeCmdLine />, mountPoint);

    </script>
  </body>
</html>
